---
# Items that apply to ALL profiles:
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8011/eureka/
      
---
spring:
  profiles: subject
words: I,You,He,She,It
  
---
spring:
  profiles: verb
words: ran,knew,had,saw,bought

---
spring:
  profiles: article
words: a,the

---
spring:
  profiles: adjective
words: reasonable,leaky,suspicious,ordinary,unlikely

---
spring:
  profiles: noun
words: boat,book,vote,seat,backpack,partition,groundhog

---
# This default profile is used when running a single instance completely standalone:
spring:
  profiles: default
server:
  port: 8010  
eureka:
  instance:
    hostname: eurekahost  
  client:
    registerWithEureka: false
    fetchRegistry: false
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/    

# primary, secondary, and tertiary illustrate running 3 intercommunicating instances.  This example has them running
# side-by-side on localhost -- which is unrealistic in production -- but does illustrate how multiple instances collaborate.
# Run by opening 3 separate command prompts:
# java -jar -Dspring.profiles.active=primary lab-4-eureka-server-solution-0.0.1-SNAPSHOT.jar
# java -jar -Dspring.profiles.active=primary commmon-eureka-server-1.jar
# java -jar -Dspring.profiles.active=secondary lab-4-eureka-server-solution-0.0.1-SNAPSHOT.jar
# java -jar -Dspring.profiles.active=secondary commmon-eureka-server-1.jar
# java -jar -Dspring.profiles.active=tertiary lab-4-eureka-server-solution-0.0.1-SNAPSHOT.jar
# java -jar -Dspring.profiles.active=secondary commmon-eureka-server-1.jar

---
spring:
  profiles: primary
  application:
    name: eureka-server-clustered 
server:
  port: 8011  
eureka:
  instance:
    hostname: primary
  client:
    registerWithEureka: true
    fetchRegistry: true   
    serviceUrl:
      defaultZone: http://secondary:8012/eureka/,http://tertiary:8013/eureka/

---
spring:
  profiles: secondary
  application:
    name: eureka-server-clustered 
server:
  port: 8012  
eureka:
  instance:
    hostname: secondary
  client:
    registerWithEureka: true
    fetchRegistry: true   
    serviceUrl:
      defaultZone: http://tertiary:8013/eureka/,http://primary:8011/eureka/

---
spring:
  profiles: tertiary
  application:
    name: eureka-server-clustered 
server:
  port: 8013  
eureka:
  instance:
    hostname: tertiary
  client:
    registerWithEureka: true
    fetchRegistry: true   
    serviceUrl:
      defaultZone: http://primary:8011/eureka/,http://secondary:8012/eureka/
  
